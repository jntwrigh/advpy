import io
import re
import sys
import importlib
import itertools


def list_module_contents(module_name, show_special_methods=False, num_help_lines=10):
    """
        This generator accepts a module name and yields one tuple of data at a time (see the
        return value).  It uses the dir() command and the help() command to extract a summary
        of help information of all items in a module.

        :param module_name: str name of a module (e.g. 'os' or 'sys')
        :param show_special_methods: should special methods or properties be displayed? (e.g. __name__)
        :param num_help_lines: how many lines per entry item to display, default is 10 lines.
        :return: yields a tuple of data (item, text) where item is the module item (e.g. sys.setcheckinterval)
                 and text is a text string containing the help text generated by the help() command
    """
    mod = importlib.import_module(module_name)
    dir_buf = io.StringIO()

    old_stdout = sys.stdout
    sys.stdout = dir_buf

    for mod_entry in dir(mod):
        if show_special_methods and mod_entry.startswith('_'):
            dir_buf.write('{0}\n'.format(mod_entry))
        else:
            dir_buf.write('{0}\n'.format(mod_entry))

    dir_buf.seek(0)
    sys.stdout = old_stdout

    for item in dir_buf:
        help_buf = io.StringIO()
        sys.stdout = help_buf
        help(getattr(mod, item.strip()))
        sys.stdout = old_stdout
        help_buf.seek(0)

        help_lines = [line for line in itertools.islice(help_buf, num_help_lines + 2)]
        help_txt = ''.join(help_lines[2:])

        help_txt.replace('\n\n', '\n')
        if re.search('no Python documentation found', help_txt):
            help_txt = 'No documentation.'

        yield item.strip(), help_txt
